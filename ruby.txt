Atom runner: alt+R

In terminal: ruby filename(for example: ruby giraffe.rb)
_____________________________
VARIABLES

character_name = "Mike"
character_age = "35"
puts ("There once was a man named " + character_name + ".")
puts ("he was " + character_age + " years old.")
character_name = "Tom"
puts ("He really liked the name " + character_name + ".")
puts ("but didn't like being " + character_age + ".")
_____________________________
DATA TYPES

name = "Carola"
age = 29
gpa = 3.2
ismale = false/true/nil
_____________________________
STRINGS

\" = text between ""
\n = next line

phrase = "Giraffe Academy"

puts phrase
puts phrase.upcase()
puts phrase.downcase()
puts phrase.strip()
puts phrase.length()
puts phrase.include? "Academy"
puts phrase[0]
puts phrase[0,3]
puts phrase.index("G")
_____________________________
MATH & NUMBERS

puts 5
puts 5.865
puts -5.865
puts 5 + 9
+ - * / ** %
puts Math.sqrt(36)
puts Math.log(1)
num = 20
puts ("my fave num: " + num.to_s)
puts num.abs() = absolute
num = 20.876
puts num.round()
puts num.ceil()
puts num.floor()
_____________________________
GETTING USER INPUT

puts "Enter your name: "
name = gets
puts ("Hello " + name)

puts "Enter your name: "
name = gets.chomp()
puts ("Hello " + name + ", you are cool!")

puts "Enter your name: "
name = gets.chomp()
puts "Enter your age: "
age = gets.chomp()
puts ("Hello " + name + ", you are " + age)
_____________________________
BUILDING A CALCULATOR

puts "Enter a number: "
num1 = gets.chomp()
puts "Enter another number: "
num2 = gets.chomp()

puts (num1.to_i + num2.to_i)
puts (num1.to_f + num2.to_f)
_____________________________
BUILDING A MAD LIBS GAME

puts ("Roses are red")
puts ("Violets are blue")
puts ("I love you")

puts ("Roses are {color}")
puts ("{plural_noun} are blue")
puts ("I love {celebrity}")

puts "Enter a color: "
color = gets.chomp()
puts "Enter a plural noun: "
plural_noun = gets.chomp()
puts "Enter a celebrity: "
celebrity = gets.chomp()

puts ("Roses are " + color)
puts (plural_noun + " are blue")
puts ("I love " + celebrity)
_____________________________
ARRAYS

friends = Array["Kevin", "Karen", "Oscar"]
puts friends[0]
puts friends[-1]
puts friends[0, 2]
friends[0] = "Dwight"
friends = Array.new
friends[0] = "Michael"
friends[5] = "Holly"
puts friends
puts friends.length()
puts friends.include? "Karen"
puts friends.reverse()
_____________________________
HASHES

states = {
  "Pennsylvania" => "PA",
  "New York" => "NY",
  "Oregon" => "OR"
}

puts states["Oregon"]
:Pennsylvania =>
1 =>
_____________________________
METHODS

def sayhi
  puts "Hello User"
end

puts "top"
sayhi
puts "bottom"

def sayhi(name)
  puts ("Hello " + name)
end

sayhi("Carola")

def sayhi(name="no name", age=-1)
  puts ("Hello " + name + ", you are: " + age.to_s)
end

sayhi("Carola")
_____________________________
RETURN STATEMENT

def cube(num)
  return num * num * num, 70
  5
end

puts cube(3)
_____________________________
IF STATEMENTS

isMale = false;
isTall = true;

  if isMale and isTall
    puts "You are a tall male"
  elseif isMale and !isTall
    puts "You are a short male!"
  elseif !isMale and isTall
    puts "You are not male but are tall"
  else
    puts "You are not male and not tall"
  end
_____________________________
IF STATEMENTS (CONT.)

def max(num1, num2, num3)
  if num1 >= num2 and num1 >= num3
    return num1
  elsif num2 >= num1 and num2 >= num3
    return num2
  else
    return num3
  end
end


puts max(1, 20, 3)
_____________________________
BUILDING A BETTER CALCULATOR

puts "Enter first number: "
num1 = gets.chomp().to_f
puts "Enter operator: "
op = gets.chomp()
puts "Enter second number: "
num2 = gets.chomp().to_f

if op == "+"
  puts (num1 + num2)
elsif op == "-"
  puts (num1 - num2)
elsif op == "/"
  puts (num1 / num2)
elsif op == "*"
  puts (num1 * num2)
else
  puts "Invalid operator"
end
_____________________________
CASE EXPRESSIONS

def get_day_name(day)
  day_name = ""

  case day
  when "mon"
    day_name = "Monday"
  when "tue"
    day_name = "Tuesday"
  when "wed"
    day_name = "Wednesday"
  when "thu"
    day_name = "Thursday"
  when "fri"
    day_name = "Friday"
  when "sat"
    day_name = "Saturday"
  when "sun"
    day_name = "Sunday"
  else
    day_name = "Invalid abbreviation"
  end



  return day_name
end


puts get_day_name("sun")
_____________________________
WHILE LOOPS

index = 1
while index <= 5
  puts index
  index += 1
end
_____________________________
BUILDING A GUESSING GAME

secret_word = "giraffe"
guess = ""
guess_count = 0
guess_limit = 3
out_of_guesses = false


while guess != secret_word and !out_of_guesses
  if guess_count < guess_limit
    puts "Enter guess: "
    guess = gets.chomp()
    guess_count += 1
  else
    out_of_guesses = true
  end

end

if out_of_guesses
  puts "You Lose!"
else
  puts "You Won!"
end
_____________________________
FOR LOOPS

friends = ["Kevin", "Karen", "Oscar", "Angela", "Andy"]

for friend in friends
  puts friend
end

friends.each do |friend|
  puts friend
end

for index in 0..5
  puts index
end

6.times do |index|
  puts index
end
_____________________________
EXPONENT METHOD

def pow(base_num, pow_num)
  result = 1
  pow_num.times do |index|
    result = result * base_num
  end
  return result
end

puts pow(5, 2)
_____________________________
COMMENTS

# comment
=begin
=end       multi-line comment
_____________________________
READING FILES

File.open("employees.txt", "r") do |file|
  puts file.read()
end
puts file.readline()
puts file.readchar()

File.open("employees.txt", "r") do |file|
  for line in file.readlines()
    puts line
  end
end

file = File.open("employees.txt", "r")
file.close()
_____________________________
WRITING FILES

File.open("employees.txt", "a") do |file|
  file.write("\n Oscar, Accounting")
end

File.open("index.html", "w") do |file|
  file.write("<h1>Hello</h1>")
end
_____________________________
HANDLING ERRORS

lucky_nums = [4, 8, 15, 16, 23, 42]
# lucky_nums["dog"]
# num = 10 / 0
begin
  lucky_nums["dog"]
  num = 10 / 0
rescue ZeroDivisionError
  puts "Division by zero error"
rescue TypeError => e
  puts e
end
_____________________________
CLASSES & OBJECTS

class Book
  attr_accessor :title, :author, :pages
end

book1 = Book.new()
book1.title = "Harry Potter"
book1.author = "JK Rowling"
book1.pages = 400

book2 = Book.new()
book2.title = "Lord of the Rings"
book2.author = "Tolkien"
book2.pages = 500

puts book1.title
_____________________________
INITIALIZE METHOD

class Book
  attr_accessor :title, :author, :pages
  def initialize(name)
    puts ("Hello " + name)
  end
end

book1 = Book.new("Mike")
book1.title = "Harry Potter"
book1.author = "JK Rowling"
book1.pages = 400

book2 = Book.new("Bill")
book2.title = "Lord of the Rings"
book2.author = "Tolkien"
book2.pages = 500
-----------------------------
class Book
  attr_accessor :title, :author, :pages
  def initialize(title, author, pages)
    @title = title
    @author = author
    @pages = pages
  end
end

book1 = Book.new("Harry Potter", "JK Rowling", 400)
book2 = Book.new("Lord of the Rings", "Tolkien", 500)

puts book2.title
_____________________________
OBJECT METHODS

class Student
  attr_accessor :name, :major, :gpa
  def initialize(name, major, gpa)
    @name = name
    @major = major
    @gpa = gpa
  end

  def has_honors
    if @gpa >= 3.5
      return true
  end
  return false
  end
end

student1 = Student.new("Jim", "Business", 2.6)
student2 = Student.new("Pam", "Art", 3.6)

puts student2.has_honors
_____________________________
BUILDING A QUIZ

class Question
  attr_accessor :prompt, :answer
  def initialize(prompt, answer)
    @prompt = prompt
    @answer = answer
  end
end

p1 = "What color are apples?\n(a)red\n(b)purple\n(c)orange"
p2 = "What color are bananas?\n(a)pink\n(b)red\n(c)yellow"
p3 = "What color are pears?\n(a)yellow\n(b)green\n(c)orange"

questions = [
  Question.new(p1, "a"),
  Question.new(p2, "c"),
  Question.new(p3, "b")
]

def run_test(questions)
  answer = ""
  score = 0
  for question in questions
    puts question.prompt
    answer = gets.chomp()
    if answer == question.answer
      score += 1
    end
  end
  puts ("You got " + score.to_s + "/" + questions.length().to_s)
end

run_test(questions)
_____________________________
INHERITANCE

class Chef
  def make_chicken
    puts "The chef makes chicken"
  end
  def make_salad
    puts "The chef makes salad"
  end
  def make_special_dish
    puts "The chef makes bbq ribs"
  end
end

class ItalianChef < Chef
  def make_special_dish
    puts "The chef makes eggplant parm"
  end
  def make_pasta
    print "The chef makes pasta"
  end
end


chef = Chef.new()
chef.make_special_dish

italian_chef = ItalianChef.new()
italian_chef.make_pasta
_____________________________
MODULES

_____________________________
INTERACTIVE RUBY(IRB)

_____________________________
